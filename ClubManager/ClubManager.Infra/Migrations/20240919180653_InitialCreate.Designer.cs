// <auto-generated />
using System;
using ClubManager.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClubManager.Infra.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240919180653_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClubMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("External")
                        .HasColumnType("bit");

                    b.Property<bool>("Internal")
                        .HasColumnType("bit");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClubMemberId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ResponsibleUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("EntityId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.ExpenseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1139),
                            Description = "Despesas relacionadas com o pagamento de salários a jogadores, treinadores e funcionários.",
                            Name = "Salários"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1144),
                            Description = "Custos associados à compra de equipamento e material desportivo necessário para a equipa.",
                            Name = "Material Desportivo"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1145),
                            Description = "Despesas com viagens e alojamento para jogos fora de casa, incluindo transporte e estadia.",
                            Name = "Custos de Viagem"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1146),
                            Description = "Custos associados à manutenção e reparação do estádio e outras infraestruturas do clube.",
                            Name = "Manutenção do Estádio"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1147),
                            Description = "Despesas com campanhas de marketing e publicidade para promover o clube e atrair patrocinadores e adeptos.",
                            Name = "Marketing e Publicidade"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1148),
                            Description = "Custos gerais de administração, incluindo despesas com escritório e administração do clube.",
                            Name = "Despesas Administrativas"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1149),
                            Description = "Despesas com seguros para proteger o clube, jogadores e infraestruturas contra riscos e danos.",
                            Name = "Seguros"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1150),
                            Description = "Custos com serviços de consultoria e honorários profissionais, como advogados e contabilistas.",
                            Name = "Honorários e Consultoria"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1151),
                            Description = "Custos relacionados com a organização de eventos especiais, como receções, eventos de angariação de fundos e outros eventos promocionais.",
                            Name = "Despesas com Eventos"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1152),
                            Description = "Custos associados com a formação e desenvolvimento contínuo de jogadores e equipa técnica.",
                            Name = "Despesas com Formação"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1153),
                            Description = "Custos relacionados com licenças e autorizações necessárias para operar o clube e participar em competições.",
                            Name = "Despesas de Licenciamento"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1155),
                            Description = "Custos com serviços essenciais, como eletricidade, água e gás para as instalações do clube.",
                            Name = "Despesas de Utilidades"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1156),
                            Description = "Custos com a reparação e manutenção de equipamentos e infraestruturas do clube.",
                            Name = "Despesas de Reparação e Manutenção"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1157),
                            Description = "Custos relacionados com empréstimos e financiamentos, incluindo juros e amortizações.",
                            Name = "Despesas de Empréstimo"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(1158),
                            Description = "Custos não categorizados especificamente, mas que podem incluir diversas despesas operacionais e imprevistos.",
                            Name = "Despesas Variáveis"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Revenue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RevenueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("EntityId");

                    b.ToTable("Revenues");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.RevenueCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("RevenueCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(791),
                            Description = "Receitas provenientes de acordos com empresas que patrocinam o clube, como patrocínios de camisas ou nomeação do estádio.",
                            Name = "Patrocínios"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(795),
                            Description = "Renda gerada com a venda de bilhetes, merchandising e alimentos e bebidas nos dias de jogo.",
                            Name = "Receitas de Dia de Jogo"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(796),
                            Description = "Receitas recebidas pela venda dos direitos de transmissão dos jogos para televisão ou plataformas de streaming.",
                            Name = "Direitos de Transmissão"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(797),
                            Description = "Receita gerada pela venda de produtos relacionados ao clube, como camisas, cachecóis e outros artigos.",
                            Name = "Merchandising"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(798),
                            Description = "Dinheiro recebido como prémio por desempenho em competições, como torneios nacionais ou internacionais.",
                            Name = "Prémios em Dinheiro"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(800),
                            Description = "Receitas provenientes de parcerias comerciais com marcas e empresas para eventos especiais ou produtos conjuntos.",
                            Name = "Parcerias Comerciais"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(801),
                            Description = "Receitas das taxas pagas pelos associados do clube para acesso a benefícios exclusivos, como bilhetes preferenciais ou eventos especiais.",
                            Name = "Taxas de Associação"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(802),
                            Description = "Receitas geradas pela venda dos direitos de nomeação do estádio do clube.",
                            Name = "Direitos de Nomeação do Estádio"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(803),
                            Description = "Receitas provenientes da venda ou empréstimo de jogadores para outros clubes.",
                            Name = "Transferências de Jogadores"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(804),
                            Description = "Receitas geradas pela publicidade dentro do estádio ou em outras plataformas relacionadas ao clube.",
                            Name = "Publicidade"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(805),
                            Description = "Receitas obtidas com a venda de pacotes de hospitalidade corporativa, que incluem bilhetes para jogos e serviços adicionais.",
                            Name = "Hospedagem Corporativa"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(806),
                            Description = "Receitas provenientes da realização de eventos especiais no estádio, como concertos ou eventos corporativos.",
                            Name = "Receitas de Eventos"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(807),
                            Description = "Receitas geradas por taxas de inscrição ou desenvolvimento de jovens talentos e futuras transferências.",
                            Name = "Receitas da Academia de Jovens"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(808),
                            Description = "Receitas obtidas pelo aluguel de instalações do clube, como campos de treino ou áreas do estádio para eventos externos.",
                            Name = "Renda de Aluguel"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(809),
                            Description = "Dinheiro recebido de subsídios governamentais, fundações ou doações privadas para apoiar o clube.",
                            Name = "Subsídios e Doações"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.Institution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HaveTrainingCenter")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficialWebsiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMediaLinks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumCapacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("StadiumInauguration")
                        .HasColumnType("datetime2");

                    b.Property<string>("StadiumName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrainingCenterAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Institution");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfLastAccess")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("InstitutionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordResetTokenExpire")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpire")
                        .HasColumnType("datetime2");

                    b.Property<long>("ResponsibleUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TwoFactorActivated")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserPermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.HasIndex("ResponsibleUserId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserPermissionId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserPermissions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Consult")
                        .HasColumnType("bit");

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<bool>("Edit")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("UserPermissions");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserRoles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3012),
                            Description = "Função administrativa para gerenciamento da instituição. Acesso total a toda a informação dentro da instituição.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3076),
                            Description = "Supervisiona todas as operações do clube, toma decisões estratégicas e tem acesso a todos as operações e funcionalidades da aplicação.",
                            Name = "Presidente"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3078),
                            Description = "Encarregado das operações futebolísticas, incluindo gestão de treinadores, jogadores, transferências e contratações.",
                            Name = "Diretor Desportivo"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3080),
                            Description = "Gere a equipe técnica, planeia treinos, táticas de jogo, escolhe a equipa para os jogos e monitoriza o desempenho dos jogadores.",
                            Name = "Treinador"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3102),
                            Description = "Gere as finanças do clube, incluindo orçamento, salários, receitas de bilheteira, patrocínios e outras fontes de receita.",
                            Name = "Diretor Financeiro"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3104),
                            Description = "Gere as instalações do clube, incluindo estádios, campos de treino e outras infraestruturas.",
                            Name = "Gestor de Infraestruturas"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3105),
                            Description = "Trata de toda a documentação e administração necessária para o funcionamento do clube.",
                            Name = "Secretário"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.Facility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityCategoryId");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FacilityCategories");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(454),
                            Description = "Outdoor or indoor areas designed for sports activities, such as soccer fields, tennis courts, etc.",
                            Name = "Sports Field"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(456),
                            Description = "Fitness centers equipped with exercise machines, weights, and other fitness equipment.",
                            Name = "Gym"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(457),
                            Description = "Rooms designated for meetings, conferences, and other business-related gatherings.",
                            Name = "Meeting Room"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(458),
                            Description = "Facilities providing restroom and changing areas, including showers and lockers.",
                            Name = "Restroom"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(459),
                            Description = "Workspaces for administrative tasks, including private offices and open office areas.",
                            Name = "Office"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(460),
                            Description = "Large rooms or halls designed for lectures, presentations, and performances.",
                            Name = "Auditorium"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("ReservedUserId");

                    b.ToTable("FacilityReservations");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestUserId");

                    b.ToTable("MaintenanceHistories");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("FacilityId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaintenanceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RequestedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.HasIndex("RequestedUserId");

                    b.ToTable("MaintenanceRequests");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.ClubMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ClubMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EducationOfficer")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Partner")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ClubMember");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.MinorClubMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GuardianId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Partner")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("GuardianId");

                    b.ToTable("MinorClubMember");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlayerCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredFoot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerCategoryId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlayerCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(127),
                            Description = "Pré-Petizes",
                            Name = "Sub-5"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(139),
                            Description = "Petizes 1º ano",
                            Name = "Sub-6"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(140),
                            Description = "Petizes 2º ano",
                            Name = "Sub-7"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(141),
                            Description = "Traquinas 1º ano",
                            Name = "Sub-8"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(142),
                            Description = "Traquinas 2º ano",
                            Name = "Sub-9"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(144),
                            Description = "Benjamins 1º ano",
                            Name = "Sub-10"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(145),
                            Description = "Benjamins 2º ano",
                            Name = "Sub-11"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(146),
                            Description = "Infantis 1º ano",
                            Name = "Sub-12"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(147),
                            Description = "Infantis 2º ano",
                            Name = "Sub-13"
                        },
                        new
                        {
                            Id = 10L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(148),
                            Description = "Iniciados 1º ano",
                            Name = "Sub-14"
                        },
                        new
                        {
                            Id = 11L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(149),
                            Description = "Iniciados 2º ano",
                            Name = "Sub-15"
                        },
                        new
                        {
                            Id = 12L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(150),
                            Description = "Juvenis 1º ano",
                            Name = "Sub-16"
                        },
                        new
                        {
                            Id = 13L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(151),
                            Description = "Juvenis 2º ano",
                            Name = "Sub-17"
                        },
                        new
                        {
                            Id = 14L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(152),
                            Description = "Juniores 1º ano",
                            Name = "Sub-18"
                        },
                        new
                        {
                            Id = 15L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(153),
                            Description = "Juniores 2º ano",
                            Name = "Sub-19"
                        },
                        new
                        {
                            Id = 16L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 453, DateTimeKind.Local).AddTicks(154),
                            Description = "Seniores",
                            Name = "Seniores"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerContract");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerPerformanceHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<string>("ClubOpponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerPerformanceHistory");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerResponsible", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrimaryContact")
                        .HasColumnType("bit");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerResponsible");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromClub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<string>("ToClub")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TransferFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerTransfer");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClubId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Female")
                        .HasColumnType("bit");

                    b.Property<bool>("Male")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("TeamCategoryId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TeamCategory");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3415),
                            Description = "Pré-Petizes",
                            Name = "Pré-Petizes"
                        },
                        new
                        {
                            Id = 2L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3417),
                            Description = "Petizes",
                            Name = "Petizes"
                        },
                        new
                        {
                            Id = 3L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3418),
                            Description = "Traquinas",
                            Name = "Traquinas"
                        },
                        new
                        {
                            Id = 4L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3419),
                            Description = "Benjamins",
                            Name = "Benjamins"
                        },
                        new
                        {
                            Id = 5L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3420),
                            Description = "Infantis",
                            Name = "Infantis"
                        },
                        new
                        {
                            Id = 6L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3422),
                            Description = "Iniciados",
                            Name = "Iniciados"
                        },
                        new
                        {
                            Id = 7L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3423),
                            Description = "Juvenis",
                            Name = "Juvenis"
                        },
                        new
                        {
                            Id = 8L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3424),
                            Description = "Juniores",
                            Name = "Juniores"
                        },
                        new
                        {
                            Id = 9L,
                            DateOfCreation = new DateTime(2024, 9, 19, 19, 6, 53, 452, DateTimeKind.Local).AddTicks(3425),
                            Description = "Seniores",
                            Name = "Seniores"
                        });
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCoach", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHeadCoach")
                        .HasColumnType("bit");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamCoach");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamPlayer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamPlayer");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.UserClubMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClubMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClubMemberId")
                        .IsUnique();

                    b.ToTable("UserClubMembers");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.Match", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompetitionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.MatchStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<int>("Goals")
                        .HasColumnType("int");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<int>("MinutesPlayed")
                        .HasColumnType("int");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<int>("RedCards")
                        .HasColumnType("int");

                    b.Property<int>("Substitutions")
                        .HasColumnType("int");

                    b.Property<int>("YellowCards")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MatchId");

                    b.HasIndex("PlayerId");

                    b.ToTable("MatchStatistics");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AbsenceReason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainingSessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TrainingSessionId");

                    b.ToTable("TrainingAttendances");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfModification")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Objectives")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Entity", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "UserClubMember")
                        .WithMany()
                        .HasForeignKey("ClubMemberId");

                    b.Navigation("UserClubMember");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Expense", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Financial.ExpenseCategory", "ExpenseCategory")
                        .WithOne("Expenses")
                        .HasForeignKey("ClubManager.Domain.Entities.Financial.Expense", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Financial.Entity", "Entity")
                        .WithMany("Expenses")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("ExpenseCategory");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Revenue", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Financial.RevenueCategory", "RevenueCategory")
                        .WithOne("Revenues")
                        .HasForeignKey("ClubManager.Domain.Entities.Financial.Revenue", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Financial.Entity", "Entity")
                        .WithMany("Revenues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Entity");

                    b.Navigation("RevenueCategory");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Identity.Institution", "Institution")
                        .WithMany("User")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Financial.Expense", "Expense")
                        .WithOne("User")
                        .HasForeignKey("ClubManager.Domain.Entities.Identity.User", "ResponsibleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.UserClubMember", "UserClubMember")
                        .WithOne("User")
                        .HasForeignKey("ClubManager.Domain.Entities.Identity.User", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.UserPermissions", "UserPermission")
                        .WithMany("Users")
                        .HasForeignKey("UserPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.UserRoles", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("Institution");

                    b.Navigation("UserClubMember");

                    b.Navigation("UserPermission");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.Facility", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.FacilityCategory", "FacilityCategory")
                        .WithMany()
                        .HasForeignKey("FacilityCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FacilityCategory");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.FacilityReservation", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "ReservedUser")
                        .WithMany("FacilityReservation")
                        .HasForeignKey("ReservedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("ReservedUser");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceHistory", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "RequestUser")
                        .WithMany("MaintenanceHistory")
                        .HasForeignKey("RequestUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RequestUser");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Infrastructures.MaintenanceRequest", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Infrastructures.Facility", "Facility")
                        .WithMany()
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "RequestedUser")
                        .WithMany("MaintenanceRequests")
                        .HasForeignKey("RequestedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("RequestedUser");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.MinorClubMember", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "Guardian")
                        .WithMany("MinorClubMembers")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guardian");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Player", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.PlayerCategory", "Category")
                        .WithMany()
                        .HasForeignKey("PlayerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Financial.Entity", "Entity")
                        .WithOne("Player")
                        .HasForeignKey("ClubManager.Domain.Entities.MembersTeams.Player", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerContract", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerContracts")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerPerformanceHistory", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerPerformanceHistories")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerResponsible", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "Member")
                        .WithMany("PlayerResponsibles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerResponsibles")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.PlayerTransfer", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("PlayerTransfers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Team", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.Identity.Institution", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.TeamCategory", "TeamCategories")
                        .WithMany()
                        .HasForeignKey("TeamCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("TeamCategories");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamCoach", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("TeamCoaches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.Identity.User", "User")
                        .WithMany("TeamCoaches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.TeamPlayer", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("TeamPlayers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.UserClubMember", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.ClubMember", "ClubMember")
                        .WithOne("UserClubMember")
                        .HasForeignKey("ClubManager.Domain.Entities.MembersTeams.UserClubMember", "ClubMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClubMember");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.Match", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.MatchStatistic", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.TrainingCompetition.Match", "Match")
                        .WithMany("MatchStatistic")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("MatchStatistic")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingAttendance", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Player", "Player")
                        .WithMany("TrainingAttendance")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", "TrainingSessions")
                        .WithMany("TrainingAttendances")
                        .HasForeignKey("TrainingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", b =>
                {
                    b.HasOne("ClubManager.Domain.Entities.MembersTeams.Team", "Team")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Entity", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Player")
                        .IsRequired();

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.Expense", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Financial.RevenueCategory", b =>
                {
                    b.Navigation("Revenues")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.Institution", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("FacilityReservation");

                    b.Navigation("MaintenanceHistory");

                    b.Navigation("MaintenanceRequests");

                    b.Navigation("TeamCoaches");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserPermissions", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.Identity.UserRoles", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.ClubMember", b =>
                {
                    b.Navigation("MinorClubMembers");

                    b.Navigation("PlayerResponsibles");

                    b.Navigation("UserClubMember")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Player", b =>
                {
                    b.Navigation("MatchStatistic");

                    b.Navigation("PlayerContracts");

                    b.Navigation("PlayerPerformanceHistories");

                    b.Navigation("PlayerResponsibles");

                    b.Navigation("PlayerTransfers");

                    b.Navigation("TeamPlayers");

                    b.Navigation("TrainingAttendance");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.Team", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("TeamCoaches");

                    b.Navigation("TeamPlayers");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.MembersTeams.UserClubMember", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.Match", b =>
                {
                    b.Navigation("MatchStatistic");
                });

            modelBuilder.Entity("ClubManager.Domain.Entities.TrainingCompetition.TrainingSession", b =>
                {
                    b.Navigation("TrainingAttendances");
                });
#pragma warning restore 612, 618
        }
    }
}
